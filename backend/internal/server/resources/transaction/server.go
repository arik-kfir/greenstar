// Code generated by greenstar scripts; DO NOT EDIT.

package transaction

import (
	"net/http"

	"github.com/arikkfir/greenstar/backend/internal/server/middleware"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

type Server struct {
	h    Handler
	pool *pgxpool.Pool
}

func (s *Server) makeTransactionalIfNecessary(transactional bool, mode pgx.TxAccessMode, next http.Handler) http.Handler {
	if transactional {
		return middleware.PostgresMiddleware(s.pool, mode, next)
	} else {
		return next
	}
}

func (s *Server) Register(mux *http.ServeMux) {
	mux.Handle("/tenants/{tenantID}/transactions", &middleware.Handlers{
		GET:  s.makeTransactionalIfNecessary(true, pgx.ReadOnly, http.HandlerFunc(s.List)),
		POST: s.makeTransactionalIfNecessary(true, pgx.ReadWrite, http.HandlerFunc(s.Create)),
	})
	mux.Handle("/tenants/{tenantID}/transactions/{id}", &middleware.Handlers{
		GET:    s.makeTransactionalIfNecessary(true, pgx.ReadOnly, http.HandlerFunc(s.Get)),
		PATCH:  s.makeTransactionalIfNecessary(true, pgx.ReadWrite, http.HandlerFunc(s.Patch)),
		PUT:    s.makeTransactionalIfNecessary(true, pgx.ReadWrite, http.HandlerFunc(s.Update)),
		DELETE: s.makeTransactionalIfNecessary(true, pgx.ReadWrite, http.HandlerFunc(s.Delete)),
	})
}

func NewServer(pool *pgxpool.Pool, handler Handler) *Server {
	return &Server{
		h:    handler,
		pool: pool,
	}
}
