// Code generated by greenstar scripts; DO NOT EDIT.

package transaction

import (
	"net/http"

	"github.com/arikkfir/greenstar/backend/internal/auth"
	"github.com/arikkfir/greenstar/backend/internal/server/util"
)

type DeleteRequest struct {
	TenantID string `json:"-"`
	ID       string `json:"id"`
}

func (lr *DeleteRequest) UnmarshalFromRequest(r *http.Request) error {
	lr.TenantID = r.PathValue("tenantID")
	if lr.TenantID == "" {
		return util.ErrBadRequest
	}
	lr.ID = r.PathValue("id")
	if lr.ID == "" {
		return util.ErrBadRequest
	}
	return nil
}

type DeleteResponse struct{}

func (s *Server) Delete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	l := util.Logger(ctx)
	if !auth.GetToken(ctx).IsPermittedForTenant(r.PathValue("tenantID"), "transactions:delete") {
		util.ServeError(w, r, util.ErrForbidden)
		l.With("tenantID", r.PathValue("TenantPathVariableName")).WarnContext(ctx, "Access denied", "permission", "transactions:delete")
		return
	}

	req := DeleteRequest{}
	if err := req.UnmarshalFromRequest(r); err != nil {
		util.ServeError(w, r, err)
		return
	}

	err := s.h.Delete(ctx, req)
	if err != nil {
		if code := util.ServeError(w, r, err); code >= http.StatusInternalServerError {
			l.ErrorContext(ctx, "Failed deleting transaction", "err", err)
		}
		return
	}

	w.WriteHeader(http.StatusNoContent)
}
