package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/arik-kfir/greenstar/backend/gql"
	"github.com/arik-kfir/greenstar/backend/model"
)

// Labels is the resolver for the labels field.
func (r *accountResolver) Labels(ctx context.Context, obj *model.Account) ([]*model.KeyAndValue, error) {
	return r.AccountsService.Labels(ctx, obj)
}

// Children is the resolver for the children field.
func (r *accountResolver) Children(ctx context.Context, obj *model.Account) ([]*model.Account, error) {
	return r.AccountsService.Children(ctx, obj)
}

// Parent is the resolver for the parent field.
func (r *accountResolver) Parent(ctx context.Context, obj *model.Account) (*model.Account, error) {
	return r.AccountsService.Parent(ctx, obj)
}

// OutgoingTransactions is the resolver for the outgoingTransactions field.
func (r *accountResolver) OutgoingTransactions(ctx context.Context, obj *model.Account) ([]*model.Transaction, error) {
	return r.AccountsService.OutgoingTransactions(ctx, obj)
}

// IncomingTransactions is the resolver for the incomingTransactions field.
func (r *accountResolver) IncomingTransactions(ctx context.Context, obj *model.Account) ([]*model.Transaction, error) {
	return r.AccountsService.IncomingTransactions(ctx, obj)
}

// Account returns gql.AccountResolver implementation.
func (r *Resolver) Account() gql.AccountResolver { return &accountResolver{r} }

type accountResolver struct{ *Resolver }
