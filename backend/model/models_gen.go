// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Account struct {
	Tenant               *Tenant        `json:"tenant"`
	ID                   string         `json:"id"`
	DisplayName          string         `json:"displayName"`
	Labels               []*KeyAndValue `json:"labels"`
	ChildCount           int            `json:"childCount"`
	Children             []*Account     `json:"children"`
	Parent               *Account       `json:"parent,omitempty"`
	OutgoingTransactions []*Transaction `json:"outgoingTransactions"`
	IncomingTransactions []*Transaction `json:"incomingTransactions"`
}

type AccountChanges struct {
	DisplayName *string             `json:"displayName,omitempty"`
	Labels      []*KeyAndValueInput `json:"labels,omitempty"`
	ParentID    *string             `json:"parentID,omitempty"`
}

type KeyAndValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type KeyAndValueInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Operation struct {
	ID          string          `json:"id"`
	Name        string          `json:"name"`
	Description *string         `json:"description,omitempty"`
	Status      OperationStatus `json:"status"`
	Result      OperationResult `json:"result"`
	CreatedAt   string          `json:"createdAt"`
	UpdatedAt   string          `json:"updatedAt"`
}

type OperationChanges struct {
	Name        string          `json:"name"`
	Description *string         `json:"description,omitempty"`
	Status      OperationStatus `json:"status"`
	Result      OperationResult `json:"result"`
}

type Tenant struct {
	ID           string         `json:"id"`
	DisplayName  string         `json:"displayName"`
	Accounts     []*Account     `json:"accounts"`
	Account      *Account       `json:"account,omitempty"`
	Transactions []*Transaction `json:"transactions"`
}

type TenantChanges struct {
	DisplayName string `json:"displayName"`
}

type Transaction struct {
	ID            string    `json:"id"`
	Date          time.Time `json:"Date"`
	TargetAccount *Account  `json:"targetAccount"`
	SourceAccount *Account  `json:"sourceAccount"`
	ReferenceID   string    `json:"referenceID"`
	Amount        Money     `json:"amount"`
	Description   string    `json:"description"`
}

type TransactionChanges struct {
	Date            time.Time `json:"Date"`
	TargetAccountID string    `json:"targetAccountID"`
	SourceAccountID string    `json:"sourceAccountID"`
	ReferenceID     string    `json:"referenceID"`
	Amount          Money     `json:"amount"`
	Description     string    `json:"description"`
}

type OperationResult string

const (
	OperationResultSucceeded OperationResult = "SUCCEEDED"
	OperationResultFailed    OperationResult = "FAILED"
)

var AllOperationResult = []OperationResult{
	OperationResultSucceeded,
	OperationResultFailed,
}

func (e OperationResult) IsValid() bool {
	switch e {
	case OperationResultSucceeded, OperationResultFailed:
		return true
	}
	return false
}

func (e OperationResult) String() string {
	return string(e)
}

func (e *OperationResult) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationResult(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationResult", str)
	}
	return nil
}

func (e OperationResult) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OperationStatus string

const (
	OperationStatusPending   OperationStatus = "PENDING"
	OperationStatusAccepted  OperationStatus = "ACCEPTED"
	OperationStatusRejected  OperationStatus = "REJECTED"
	OperationStatusStarted   OperationStatus = "STARTED"
	OperationStatusCompleted OperationStatus = "COMPLETED"
)

var AllOperationStatus = []OperationStatus{
	OperationStatusPending,
	OperationStatusAccepted,
	OperationStatusRejected,
	OperationStatusStarted,
	OperationStatusCompleted,
}

func (e OperationStatus) IsValid() bool {
	switch e {
	case OperationStatusPending, OperationStatusAccepted, OperationStatusRejected, OperationStatusStarted, OperationStatusCompleted:
		return true
	}
	return false
}

func (e OperationStatus) String() string {
	return string(e)
}

func (e *OperationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OperationStatus", str)
	}
	return nil
}

func (e OperationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
