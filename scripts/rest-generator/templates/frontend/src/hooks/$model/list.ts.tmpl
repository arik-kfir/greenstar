{{- if .model.List -}}
// This file is generated by greenstar scripts. DO NOT EDIT.
// noinspection DuplicatedCode

import {{- "{" }}{{ .model.Name }}{{- "}" }} from "../../models/{{ .model.Name | lower }}.ts";
import {DateProperties} from "../../models/{{ .model.Name | lower }}.ts";
import {BaseAPIURL, QueryNilValue} from "../../services/util.ts"
import {useOperation, Method, Hook} from "../../util/operation.ts";

export type SortableProperty =
    {{- $first := true -}}
    {{- range $name, $p := .model.Properties -}}
    {{- if not $first }} | {{- end -}}'{{ $name | toLowerCamelCase }}'
    {{- $first = false -}}
    {{- end }}

export interface Request {
    offset?: number
    count?: number
    sort?: SortableProperty[]
    {{- range $name, $f := .model.List.Filters }}
    {{ $name | toLowerCamelCase }}{{- if not $f.Required -}}?{{- end -}}: {{ $f.Type.TypeScriptType }}
    {{- end }}
    {{- range $name, $p := .model.List.Parameters }}
    {{ $name | toLowerCamelCase }}{{- if not $p.Required -}}?{{- end -}}: {{ $p.Type.TypeScriptType }}
    {{- end }}
}
export interface Response {
    offset: number
    totalCount: number
    items: {{ .model.Name }}[]
}

function buildURL(req: Request): string {
    const urlParams = new URLSearchParams();

    if (req.offset !== undefined && req.offset >= 0) {
        urlParams.set("_offset", req.offset+"")
    }
    if (req.count !== undefined && req.count >= 0) {
        urlParams.set("_count", req.count+"")
    }
    if (req.sort !== undefined && req?.sort.length) {
        req.sort.forEach(s => urlParams.append("_sort", s))
    }

    {{- range $name, $f := .model.List.Filters }}
    if (req.{{ $name | toLowerCamelCase }} !== undefined) {
        if (req.{{ $name | toLowerCamelCase }} === null) {
            urlParams.set("{{ $name | toLowerCamelCase }}", QueryNilValue)
        } else {
            {{- if eq $f.Type.TypeScriptType "Date" }}
            urlParams.set("{{ $name | toLowerCamelCase }}", req.{{ $name | toLowerCamelCase }}.toISOString())
            {{- else if eq $f.Type.TypeScriptType "number" }}
            urlParams.set("{{ $name | toLowerCamelCase }}", req.{{ $name | toLowerCamelCase }}+"")
            {{- else }}
            urlParams.set("{{ $name | toLowerCamelCase }}", req.{{ $name | toLowerCamelCase }})
            {{- end }}
        }
    }
    {{- end }}
    {{- range $name, $p := .model.List.Parameters }}
    if (req.{{ $name | toLowerCamelCase }} !== undefined) {
        if (req.{{ $name | toLowerCamelCase }} === null) {
            urlParams.set("{{ $name | toLowerCamelCase }}", QueryNilValue)
        } else {
            {{- if eq $p.Type.TypeScriptType "Date" }}
            urlParams.set("{{ $name | toLowerCamelCase }}", req.{{ $name | toLowerCamelCase }}.toISOString())
            {{- else if eq $p.Type.TypeScriptType "number" }}
            urlParams.set("{{ $name | toLowerCamelCase }}", req.{{ $name | toLowerCamelCase }}+"")
            {{- else }}
            urlParams.set("{{ $name | toLowerCamelCase }}", req.{{ $name | toLowerCamelCase }})
            {{- end }}
        }
    }
    {{- end }}

    return `${BaseAPIURL}{{ .model.Path }}${urlParams.size ? "?" + urlParams.toString() : ""}`
}

export function useList{{ .model.Name | toPlural }}(): Hook<Request, Response> {
    const opts = {
        initial: {offset: 0, totalCount: 0, items: []},
        method: 'GET' as Method,
        url: buildURL,
        dateProperties: DateProperties,
    }
    return useOperation<Request, Response>(opts)
}
{{- end }}
