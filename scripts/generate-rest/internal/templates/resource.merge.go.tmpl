{{- $importDecimal := false }}
{{- $importTime := false }}
{{- range .model.Properties }}
{{- if eq .GoType "decimal.Decimal" }}{{ $importDecimal = true }}{{- end }}
{{- if eq .GoType "time.Time" }}{{ $importTime = true }}{{- end }}
{{- end }}
// Code generated by greenstar scripts; DO NOT EDIT.

package {{ .model.Name | toSnake }}

{{- if ne .model.Merge nil }}

import (
	"encoding/json"
	"github.com/arikkfir/greenstar/backend/internal/auth"
	"github.com/arikkfir/greenstar/backend/internal/server/util"
	{{- if $importDecimal }}
	"github.com/shopspring/decimal"
	{{- end }}
	"net/http"
	"slices"
	{{- if $importTime }}
	"time"
	{{- end }}
)

type MergeRequest struct {
	{{- if eq .model.Scope modelScopeTenant }}
	TenantID string `json:"-"`
	{{- end }}
	ID          string  `json:"id"`
	{{- range .model.Properties }}
	{{- if not .ReadOnly }}
	{{ .Name }} {{ if .Optional }}*{{ end }}{{ .GoType }} `json:"{{ .Name | toLowerCamelCase }},omitempty"`
	{{- end }}
	{{- end }}
	properties  []string
}

{{- range .model.Properties }}
{{- if not .ReadOnly }}
{{- if .Optional }}
func (lr *MergeRequest) Has{{ .Name }}() bool { return slices.Contains(lr.properties, "{{ .Name | toLowerCamelCase }}") }
{{- end }}
{{- end }}
{{- end }}
func (lr *MergeRequest) UnmarshalJSON(data []byte) error {
	lr.properties = nil
	var tempMap map[string]json.RawMessage
	if err := json.Unmarshal(data, &tempMap); err != nil {
		return err
	}
	for key := range tempMap {
		lr.properties = append(lr.properties, key)
	}
	type typeAlias MergeRequest
	alias := (*typeAlias)(lr)
	if err := json.Unmarshal(data, alias); err != nil {
		return err
	}
	return nil
}

type MergeResponse {{ .model.Name }}

func (s *Server) Merge(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	l := util.Logger(ctx)

	{{- range .model.Merge.Permissions }}
	{{- if eq .Scope "global" }}
	if !auth.GetToken(ctx).IsPermittedGlobally("{{ .Permission }}") {
		util.ServeError(w, r, util.ErrForbidden)
		l.WarnContext(ctx, "Access denied", "permission", "{{ .Permission }}")
		return
	}
	{{- else if eq .Scope "tenant" }}
	if !auth.GetToken(ctx).IsPermittedForTenant(r.PathValue("{{ .TenantPathVariableName }}"), "{{ .Permission }}") {
		util.ServeError(w, r, util.ErrForbidden)
		l.With("tenantID", r.PathValue("TenantPathVariableName")).WarnContext(ctx, "Access denied", "permission", "{{ .Permission }}")
		return
	}
	{{- else }}
	{{- fail "unknown model scope: %s" .Scope }}
	{{- end }}
	{{- end }}

	req := MergeRequest{}
	if err := util.UnmarshalBody(r, &req); err != nil {
		util.ServeError(w, r, err)
		return
	}
	{{- if eq .model.Scope modelScopeTenant }}
	req.TenantID = r.PathValue("tenantID")
	if req.TenantID == "" {
		util.ServeError(w, r, util.ErrBadRequest)
		return
	}
	{{- end }}
	req.ID = r.PathValue("id")
	if req.ID == "" {
		util.ServeError(w, r, util.ErrBadRequest)
		return
	}

	res, err := s.h.Merge(ctx, req)
	if err != nil {
		if code := util.ServeError(w, r, err); code >= http.StatusInternalServerError {
			l.ErrorContext(ctx, "Failed merging {{ .model.Name | lower }}", "err", err)
		}
		return
	} else if res == nil {
		util.ServeError(w, r, util.ErrNotFound)
		return
	}

	if err := util.Marshal(w, r, http.StatusOK, res); err != nil {
		l.ErrorContext(ctx, "Failed marshaling {{ .model.Name | lower }}", "err", err)
		util.ServeError(w, r, err)
	}
}

{{- end }}
