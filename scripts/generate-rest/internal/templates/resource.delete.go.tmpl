// Code generated by greenstar scripts; DO NOT EDIT.

package {{ .model.Name | toSnake }}

{{- if ne .model.Delete nil }}

import (
	"github.com/arikkfir/greenstar/backend/internal/auth"
	"github.com/arikkfir/greenstar/backend/internal/server/util"
	"net/http"
)

type DeleteRequest struct {
	{{- if eq .model.Scope modelScopeTenant }}
	TenantID string `json:"-"`
	{{- end }}
	ID       string `json:"id"`
}

func (lr *DeleteRequest) UnmarshalFromRequest(r *http.Request) error {
	{{- if eq .model.Scope modelScopeTenant }}
	lr.TenantID = r.PathValue("tenantID")
	if lr.TenantID == "" {
		return util.ErrBadRequest
	}
	{{- end }}
	lr.ID = r.PathValue("id")
	if lr.ID == "" {
		return util.ErrBadRequest
	}
	return nil
}

type DeleteResponse struct {}

func (s *Server) Delete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	l := util.Logger(ctx)

	{{- range .model.Delete.Permissions }}
	{{- if eq .Scope "global" }}
	if !auth.GetToken(ctx).IsPermittedGlobally("{{ .Permission }}") {
		util.ServeError(w, r, util.ErrForbidden)
		l.WarnContext(ctx, "Access denied", "permission", "{{ .Permission }}")
		return
	}
	{{- else if eq .Scope "tenant" }}
	if !auth.GetToken(ctx).IsPermittedForTenant(r.PathValue("{{ .TenantPathVariableName }}"), "{{ .Permission }}") {
		util.ServeError(w, r, util.ErrForbidden)
		l.With("tenantID", r.PathValue("TenantPathVariableName")).WarnContext(ctx, "Access denied", "permission", "{{ .Permission }}")
		return
	}
	{{- else }}
	{{- fail "unknown model scope: %s" .Scope }}
	{{- end }}
	{{- end }}

	req := DeleteRequest{}
	if err := req.UnmarshalFromRequest(r); err != nil {
		util.ServeError(w, r, err)
		return
	}

	err := s.h.Delete(ctx, req)
	if err != nil {
		if code := util.ServeError(w, r, err); code >= http.StatusInternalServerError {
			l.ErrorContext(ctx, "Failed deleting {{ .model.Name | lower }}", "err", err)
		}
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

{{- end }}
