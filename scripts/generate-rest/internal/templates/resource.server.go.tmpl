// Code generated by greenstar scripts; DO NOT EDIT.

package {{ .model.Name | toSnake }}

import (
	"github.com/arikkfir/greenstar/backend/internal/server/middleware"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"net/http"
)

type Server struct {
	h Handler
	pool *pgxpool.Pool
}

func (s *Server) makeTransactionalIfNecessary(transactional bool, mode pgx.TxAccessMode, next http.Handler) http.Handler {
	if transactional {
		return middleware.PostgresMiddleware(s.pool, mode, next)
	} else {
		return next
	}
}

func (s *Server) Register(mux *http.ServeMux) {
	mux.Handle("{{ if eq .model.Scope modelScopeTenant }}/tenants/{tenantID}{{ end }}{{ .model.Path }}", &middleware.Handlers{
		GET:  s.makeTransactionalIfNecessary({{ .model.List.Transactional }}, pgx.ReadOnly, http.HandlerFunc(s.List)),
		POST:  s.makeTransactionalIfNecessary({{ .model.Create.Transactional }}, pgx.ReadWrite, http.HandlerFunc(s.Create)),
	})
	mux.Handle("{{ if eq .model.Scope modelScopeTenant }}/tenants/{tenantID}{{ end }}{{ .model.Path }}/{id}", &middleware.Handlers{
		GET:  s.makeTransactionalIfNecessary({{ .model.Get.Transactional }}, pgx.ReadOnly, http.HandlerFunc(s.Get)),
		PATCH:  s.makeTransactionalIfNecessary({{ .model.Update.Transactional }}, pgx.ReadWrite, http.HandlerFunc(s.Patch)),
		PUT:  s.makeTransactionalIfNecessary({{ .model.Update.Transactional }}, pgx.ReadWrite, http.HandlerFunc(s.Update)),
		DELETE:  s.makeTransactionalIfNecessary({{ .model.Delete.Transactional }}, pgx.ReadWrite, http.HandlerFunc(s.Delete)),
	})
}

func NewServer(pool *pgxpool.Pool, handler Handler) *Server {
	return &Server{
		h: handler,
		pool: pool,
	}
}
