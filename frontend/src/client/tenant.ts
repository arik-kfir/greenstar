// This file is generated by greenstar scripts. DO NOT EDIT.
// noinspection DuplicatedCode

import {BaseAPIURL, QueryNilValue} from "./common.ts"
import {BadRequestError, InternalError} from "./errors.ts"
import {useDescope, useSession} from "@descope/react-sdk";
import {useMemo} from "react";

const slowEnvVar = import.meta.env.VITE_SLOW_REQUESTS
const slowEnvVarLower = slowEnvVar ? slowEnvVar.toLowerCase() : "false"
const slow = slowEnvVarLower == "true" || slowEnvVarLower == "t" || slowEnvVarLower == "1" || slowEnvVarLower == "y" || slowEnvVarLower == "yes"
const slowDuration = 2000
const dateProperties = [
    "createdAt",
    "updatedAt",
]

interface DescopeSdk {
    logout(token?: string): Promise<any>
}

export interface Tenant {
    id: string
    createdAt: Date
    updatedAt: Date
    displayName: string
}

function jsonReviver(key: string, value: any): any {
    if (dateProperties.includes(key)) {
        return new Date(value);
    }
    return value;
}
export interface ListTenantsRequest {
    offset?: number
    count?: number
    sort?: string[]
    id?: string
    displayName?: string
}
export interface ListTenantsResponse {
    offset: number
    totalCount: number
    items: Tenant[]
}
export interface CreateTenantRequest {
    id?: string
    displayName: string
}
export type CreateTenantResponse = Tenant
export interface GetTenantRequest {
    id: string
}
export type GetTenantResponse = Tenant
export interface PatchTenantRequest {
    id: string
    displayName?: string
}
export type PatchTenantResponse = Tenant

export interface UpdateTenantRequest {
    id: string
    displayName: string
}
export type UpdateTenantResponse = Tenant
export interface DeleteTenantRequest {
    id: string
}
export interface DeleteTenantResponse {}

export interface TenantsClient {
    List(req?: ListTenantsRequest): Promise<ListTenantsResponse>
}

class TenantsClientImpl implements TenantsClient {

    private readonly listURL: string;
    constructor(private readonly sdk: DescopeSdk, private readonly sessionToken: string) {
        this.listURL = BaseAPIURL + "/tenants"
    }

    public async List(req?: ListTenantsRequest): Promise<ListTenantsResponse> {
        const urlParams = new URLSearchParams();

        if (req?.offset !== undefined && req.offset >= 0) {
            urlParams.set("_offset", req.offset+"")
        }
        if (req?.count !== undefined && req.count >= 0) {
            urlParams.set("_count", req.count+"")
        }
        if (req?.sort !== undefined && req?.sort.length) {
            req.sort.forEach(s => urlParams.append("_sort", s))
        }
        if (req?.id !== undefined) {
            if (req?.id === null) {
                urlParams.set("id", QueryNilValue)
            } else {
                urlParams.set("id", req?.id)
            }
        }
        if (req?.displayName !== undefined) {
            if (req?.displayName === null) {
                urlParams.set("displayName", QueryNilValue)
            } else {
                urlParams.set("displayName", req?.displayName)
            }
        }

        let url = this.listURL;
        if(urlParams.size) {
            url += "?" + urlParams.toString()
        }

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${this.sessionToken}`,
            },
        }).then(r => slow ? new Promise((resolve: (v: Response) => void) => window.setTimeout(() => resolve(r), slowDuration)) : r)

        if (response.status >= 500) {
            const data = await response.text()
            console.error(`Server responded with an error status code ${response.status}: ${data}`)
            throw InternalError
        } else if (response.status == 401) {
            await this.sdk.logout()
            throw new Error('Logged out')
        } else if (response.status >= 400) {
            const data = await response.text()
            throw new BadRequestError(response.status, data)
        } else {
            return JSON.parse(await response.text(), jsonReviver)
        }
    }

    public async Create(req: CreateTenantRequest): Promise<CreateTenantResponse> {
        const response = await fetch(this.listURL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.sessionToken}`,
            },
            body: JSON.stringify(req)
        }).then(r => slow ? new Promise((resolve: (v: Response) => void) => window.setTimeout(() => resolve(r), slowDuration)) : r)

        if (response.status >= 500) {
            const data = await response.text()
            console.error(`Server responded with an error status code ${response.status}: ${data}`)
            throw InternalError
        } else if (response.status == 401) {
            await this.sdk.logout()
            throw new Error('Logged out')
        } else if (response.status >= 400) {
            const data = await response.text()
            throw new BadRequestError(response.status, data)
        } else {
            return JSON.parse(await response.text(), jsonReviver)
        }
    }

    public async Get(req: GetTenantRequest): Promise<GetTenantResponse> {
        const urlParams = new URLSearchParams();

        let url = `${this.listURL}/${req.id}`;
        if(urlParams.size) {
            url += "?" + urlParams.toString()
        }

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${this.sessionToken}`,
            },
        }).then(r => slow ? new Promise((resolve: (v: Response) => void) => window.setTimeout(() => resolve(r), slowDuration)) : r)

        if (response.status >= 500) {
            const data = await response.text()
            console.error(`Server responded with an error status code ${response.status}: ${data}`)
            throw InternalError
        } else if (response.status == 401) {
            await this.sdk.logout()
            throw new Error('Logged out')
        } else if (response.status >= 400) {
            const data = await response.text()
            throw new BadRequestError(response.status, data)
        } else {
            return JSON.parse(await response.text(), jsonReviver)
        }
    }

    public async Patch(req: PatchTenantRequest): Promise<PatchTenantResponse> {
        const response = await fetch(`${this.listURL}/${req.id}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.sessionToken}`,
            },
            body: JSON.stringify(req),
        }).then(r => slow ? new Promise((resolve: (v: Response) => void) => window.setTimeout(() => resolve(r), slowDuration)) : r)

        if (response.status >= 500) {
            const data = await response.text()
            console.error(`Server responded with an error status code ${response.status}: ${data}`)
            throw InternalError
        } else if (response.status == 401) {
            await this.sdk.logout()
            throw new Error('Logged out')
        } else if (response.status >= 400) {
            const data = await response.text()
            throw new BadRequestError(response.status, data)
        } else {
            return JSON.parse(await response.text(), jsonReviver)
        }
    }

    public async Update(req: UpdateTenantRequest): Promise<UpdateTenantResponse> {
        const response = await fetch(`${this.listURL}/${req.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.sessionToken}`,
            },
            body: JSON.stringify(req),
        }).then(r => slow ? new Promise((resolve: (v: Response) => void) => window.setTimeout(() => resolve(r), slowDuration)) : r)

        if (response.status >= 500) {
            const data = await response.text()
            console.error(`Server responded with an error status code ${response.status}: ${data}`)
            throw InternalError
        } else if (response.status == 401) {
            await this.sdk.logout()
            throw new Error('Logged out')
        } else if (response.status >= 400) {
            const data = await response.text()
            throw new BadRequestError(response.status, data)
        } else {
            return JSON.parse(await response.text(), jsonReviver)
        }
    }

    public async Delete(req: DeleteTenantRequest): Promise<DeleteTenantResponse> {
        const urlParams = new URLSearchParams();

        let url = `${this.listURL}/${req.id}`;
        if(urlParams.size) {
            url += "?" + urlParams.toString()
        }

        const response = await fetch(url, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${this.sessionToken}`,
            },
        }).then(r => slow ? new Promise((resolve: (v: Response) => void) => window.setTimeout(() => resolve(r), slowDuration)) : r)

        if (response.status >= 500) {
            const data = await response.text()
            console.error(`Server responded with an error status code ${response.status}: ${data}`)
            throw InternalError
        } else if (response.status == 401) {
            await this.sdk.logout()
            throw new Error('Logged out')
        } else if (response.status >= 400) {
            const data = await response.text()
            throw new BadRequestError(response.status, data)
        } else {
            return JSON.parse(await response.text(), jsonReviver)
        }
    }
}

export function useTenantsClient(): TenantsClient {
    const sdk = useDescope();
    const {sessionToken} = useSession();
    return useMemo(() => new TenantsClientImpl(sdk, sessionToken), [sessionToken])
}
